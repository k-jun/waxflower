/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"

	"github.com/jinzhu/copier"
	"github.com/k-jun/waxflower/model"
	"github.com/k-jun/waxflower/registry"
)

// SeatAPIService is a service that implements the logic for the SeatAPIServicer
// This service should implement the business logic for every endpoint for the SeatAPI API.
// Include any external packages or services that will be required by this service.
type SeatAPIService struct {
	db registry.IRegistry
}

// NewSeatAPIService creates a default api service
func NewSeatAPIService(db registry.IRegistry) SeatAPIServicer {
	return &SeatAPIService{db}
}

// SeatsPost -
func (s *SeatAPIService) SeatsPost(ctx context.Context, seat Seat) (ImplResponse, error) {
	ms := model.Seat{}
	err := copier.Copy(&ms, &seat)
	if err != nil {
		return Response(400, err), nil
	}
	_, err = s.db.InsertSeat(&ms)
	if err != nil {
		return Response(400, err), nil
	}
	return Response(200, err), nil
}

// SeatsSeatIdGet -
func (s *SeatAPIService) SeatsSeatIdGet(ctx context.Context, seatId string) (ImplResponse, error) {
	ms := &model.Seat{Id: seatId}
	ms, err := s.db.SelectSeat(ms)
	if err != nil {
		return Response(400, err), nil
	}
	se := &Seat{}
	err = copier.Copy(se, ms)
	if err != nil {
		return Response(400, err), nil
	}
	return Response(200, se), nil
}
