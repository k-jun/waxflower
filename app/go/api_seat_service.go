/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// SeatAPIService is a service that implements the logic for the SeatAPIServicer
// This service should implement the business logic for every endpoint for the SeatAPI API.
// Include any external packages or services that will be required by this service.
type SeatAPIService struct {
	db IDB
}

// NewSeatAPIService creates a default api service
func NewSeatAPIService(db IDB) SeatAPIServicer {
	return &SeatAPIService{db}
}

// SeatsPost -
func (s *SeatAPIService) SeatsPost(ctx context.Context, seat Seat) (ImplResponse, error) {
	_, err := s.db.InsertSeat(&seat)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// SeatsSeatIdDelete -
func (s *SeatAPIService) SeatsSeatIdDelete(ctx context.Context, seatId string) (ImplResponse, error) {
	_, err := s.db.DeleteSeat(&Seat{Id: seatId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// SeatsSeatIdGet -
func (s *SeatAPIService) SeatsSeatIdGet(ctx context.Context, seatId string) (ImplResponse, error) {
	x, err := s.db.SelectSeat(&Seat{Id: seatId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, x), nil
}

// SeatsSeatIdPut -
func (s *SeatAPIService) SeatsSeatIdPut(ctx context.Context, seatId string, seat Seat) (ImplResponse, error) {
	seat.Id = seatId
	x, err := s.db.UpdateSeat(&seat)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, x), nil
}
