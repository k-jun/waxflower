/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// TicketAPIService is a service that implements the logic for the TicketAPIServicer
// This service should implement the business logic for every endpoint for the TicketAPI API.
// Include any external packages or services that will be required by this service.
type TicketAPIService struct {
	db IDB
}

// NewTicketAPIService creates a default api service
func NewTicketAPIService(db IDB) TicketAPIServicer {
	return &TicketAPIService{db}
}

// TicketsPost -
func (s *TicketAPIService) TicketsPost(ctx context.Context, ticket Ticket) (ImplResponse, error) {
	_, err := s.db.InsertTicket(&ticket)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// TicketsTicketIdDelete -
func (s *TicketAPIService) TicketsTicketIdDelete(ctx context.Context, ticketId string) (ImplResponse, error) {
	_, err := s.db.DeleteTicket(&Ticket{Id: ticketId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// TicketsTicketIdGet -
func (s *TicketAPIService) TicketsTicketIdGet(ctx context.Context, ticketId string) (ImplResponse, error) {
	g, err := s.db.SelectTicket(&Ticket{Id: ticketId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, g), nil
}

// TicketsTicketIdPut -
func (s *TicketAPIService) TicketsTicketIdPut(ctx context.Context, ticketId string, ticket Ticket) (ImplResponse, error) {
	ticket.Id = ticketId
	g, err := s.db.UpdateTicket(&ticket)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, g), nil
}
