/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// MainAPIController binds http requests to an api service and writes the service results to the http response
type MainAPIController struct {
	service      MainAPIServicer
	errorHandler ErrorHandler
}

// MainAPIOption for how the controller is set up.
type MainAPIOption func(*MainAPIController)

// WithMainAPIErrorHandler inject ErrorHandler into controller
func WithMainAPIErrorHandler(h ErrorHandler) MainAPIOption {
	return func(c *MainAPIController) {
		c.errorHandler = h
	}
}

// NewMainAPIController creates a default api controller
func NewMainAPIController(s MainAPIServicer, opts ...MainAPIOption) Router {
	controller := &MainAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MainAPIController
func (c *MainAPIController) Routes() Routes {
	return Routes{
		"BuyPut": Route{
			strings.ToUpper("Put"),
			"/buy",
			c.BuyPut,
		},
		"SearchGet": Route{
			strings.ToUpper("Get"),
			"/search",
			c.SearchGet,
		},
	}
}

// BuyPut -
func (c *MainAPIController) BuyPut(w http.ResponseWriter, r *http.Request) {
	buyPutRequestParam := BuyPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&buyPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBuyPutRequestRequired(buyPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBuyPutRequestConstraints(buyPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BuyPut(r.Context(), buyPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchGet -
func (c *MainAPIController) SearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dateBeforeParam string
	if query.Has("dateBefore") {
		param := string(query.Get("dateBefore"))

		dateBeforeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "dateBefore"}, nil)
		return
	}
	var dateAfterParam string
	if query.Has("dateAfter") {
		param := string(query.Get("dateAfter"))

		dateAfterParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "dateAfter"}, nil)
		return
	}
	var secFromParam int32
	if query.Has("secFrom") {
		param, err := parseNumericParameter[int32](
			query.Get("secFrom"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		secFromParam = param
	} else {
	}
	var secToParam int32
	if query.Has("secTo") {
		param, err := parseNumericParameter[int32](
			query.Get("secTo"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		secToParam = param
	} else {
	}
	var priceMinParam int32
	if query.Has("priceMin") {
		param, err := parseNumericParameter[int32](
			query.Get("priceMin"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		priceMinParam = param
	} else {
	}
	var priceMaxParam int32
	if query.Has("priceMax") {
		param, err := parseNumericParameter[int32](
			query.Get("priceMax"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		priceMaxParam = param
	} else {
	}
	result, err := c.service.SearchGet(r.Context(), dateBeforeParam, dateAfterParam, secFromParam, secToParam, priceMinParam, priceMaxParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
