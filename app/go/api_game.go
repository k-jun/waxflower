/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GameAPIController binds http requests to an api service and writes the service results to the http response
type GameAPIController struct {
	service GameAPIServicer
	errorHandler ErrorHandler
}

// GameAPIOption for how the controller is set up.
type GameAPIOption func(*GameAPIController)

// WithGameAPIErrorHandler inject ErrorHandler into controller
func WithGameAPIErrorHandler(h ErrorHandler) GameAPIOption {
	return func(c *GameAPIController) {
		c.errorHandler = h
	}
}

// NewGameAPIController creates a default api controller
func NewGameAPIController(s GameAPIServicer, opts ...GameAPIOption) Router {
	controller := &GameAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GameAPIController
func (c *GameAPIController) Routes() Routes {
	return Routes{
		"GamesGameIdGet": Route{
			strings.ToUpper("Get"),
			"/games/{gameId}",
			c.GamesGameIdGet,
		},
		"GamesPost": Route{
			strings.ToUpper("Post"),
			"/games",
			c.GamesPost,
		},
	}
}

// GamesGameIdGet - 
func (c *GameAPIController) GamesGameIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	gameIdParam := params["gameId"]
	if gameIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"gameId"}, nil)
		return
	}
	result, err := c.service.GamesGameIdGet(r.Context(), gameIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GamesPost - 
func (c *GameAPIController) GamesPost(w http.ResponseWriter, r *http.Request) {
	gameParam := Game{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gameParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGameRequired(gameParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGameConstraints(gameParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GamesPost(r.Context(), gameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
