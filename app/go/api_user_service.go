/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"

	"github.com/jinzhu/copier"
	"github.com/k-jun/waxflower/model"
	"github.com/k-jun/waxflower/registry"
)

// UserAPIService is a service that implements the logic for the UserAPIServicer
// This service should implement the business logic for every endpoint for the UserAPI API.
// Include any external packages or services that will be required by this service.
type UserAPIService struct {
	db registry.IRegistry
}

// NewUserAPIService creates a default api service
func NewUserAPIService(db registry.IRegistry) UserAPIServicer {
	return &UserAPIService{db}
}

// UsersPost -
func (s *UserAPIService) UsersPost(ctx context.Context, user User) (ImplResponse, error) {
	mu := model.User{}
	err := copier.Copy(&mu, &user)
	if err != nil {
		return Response(400, nil), err
	}
	_, err = s.db.InsertUser(&mu)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), err
}

// UsersUserIdGet -
func (s *UserAPIService) UsersUserIdGet(ctx context.Context, userId string) (ImplResponse, error) {
	mu := &model.User{Id: userId}
	mu, err := s.db.SelectUser(mu)
	if err != nil {
		return Response(400, nil), err
	}
	u := &User{}
	err = copier.Copy(u, mu)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, u), err
}
