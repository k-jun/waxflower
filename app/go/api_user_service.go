/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// UserAPIService is a service that implements the logic for the UserAPIServicer
// This service should implement the business logic for every endpoint for the UserAPI API.
// Include any external packages or services that will be required by this service.
type UserAPIService struct {
	db IDB
}

// NewUserAPIService creates a default api service
func NewUserAPIService(userDB IDB) UserAPIServicer {
	return &UserAPIService{userDB}
}

// UsersPost -
func (s *UserAPIService) UsersPost(ctx context.Context, user User) (ImplResponse, error) {
	_, err := s.db.InsertUser(&user)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// UsersUserIdDelete -
func (s *UserAPIService) UsersUserIdDelete(ctx context.Context, userId string) (ImplResponse, error) {
	_, err := s.db.DeleteUser(&User{Id: userId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// UsersUserIdGet -
func (s *UserAPIService) UsersUserIdGet(ctx context.Context, userId string) (ImplResponse, error) {
	u, err := s.db.SelectUser(&User{Id: userId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, u), nil
}

// UsersUserIdPut -
func (s *UserAPIService) UsersUserIdPut(ctx context.Context, userId string, user User) (ImplResponse, error) {
	user.Id = userId
	u, err := s.db.UpdateUser(&user)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, u), nil
}
