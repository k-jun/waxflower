/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TicketAPIController binds http requests to an api service and writes the service results to the http response
type TicketAPIController struct {
	service TicketAPIServicer
	errorHandler ErrorHandler
}

// TicketAPIOption for how the controller is set up.
type TicketAPIOption func(*TicketAPIController)

// WithTicketAPIErrorHandler inject ErrorHandler into controller
func WithTicketAPIErrorHandler(h ErrorHandler) TicketAPIOption {
	return func(c *TicketAPIController) {
		c.errorHandler = h
	}
}

// NewTicketAPIController creates a default api controller
func NewTicketAPIController(s TicketAPIServicer, opts ...TicketAPIOption) Router {
	controller := &TicketAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TicketAPIController
func (c *TicketAPIController) Routes() Routes {
	return Routes{
		"TicketsPost": Route{
			strings.ToUpper("Post"),
			"/tickets",
			c.TicketsPost,
		},
		"TicketsTicketIdGet": Route{
			strings.ToUpper("Get"),
			"/tickets/{ticketId}",
			c.TicketsTicketIdGet,
		},
	}
}

// TicketsPost - 
func (c *TicketAPIController) TicketsPost(w http.ResponseWriter, r *http.Request) {
	ticketParam := Ticket{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ticketParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTicketRequired(ticketParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTicketConstraints(ticketParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TicketsPost(r.Context(), ticketParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TicketsTicketIdGet - 
func (c *TicketAPIController) TicketsTicketIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	ticketIdParam := params["ticketId"]
	if ticketIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ticketId"}, nil)
		return
	}
	result, err := c.service.TicketsTicketIdGet(r.Context(), ticketIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
