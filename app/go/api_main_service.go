/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// MainAPIService is a service that implements the logic for the MainAPIServicer
// This service should implement the business logic for every endpoint for the MainAPI API.
// Include any external packages or services that will be required by this service.
type MainAPIService struct {
	db IDB
}

// NewMainAPIService creates a default api service
func NewMainAPIService(db IDB) MainAPIServicer {
	return &MainAPIService{db}
}

// BuyPut -
func (s *MainAPIService) BuyPut(ctx context.Context, buyPutRequest BuyPutRequest) (ImplResponse, error) {
	t := Ticket{Id: buyPutRequest.Id, UserId: buyPutRequest.UserId}
	x, err := s.db.BuyTicket(&t)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, x), nil
}

// SearchGet -
func (s *MainAPIService) SearchGet(ctx context.Context, dateBefore string, dateAfter string, secFrom int32, secTo int32, priceMin int32, priceMax int32) (ImplResponse, error) {
	ts, err := s.db.SearchTickets(
		dateBefore,
		dateAfter,
		secFrom,
		secTo,
		priceMin,
		priceMax,
	)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, ts), nil
}
