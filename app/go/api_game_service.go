/*
 * WaxFlower
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Contact: keijun091221@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// GameAPIService is a service that implements the logic for the GameAPIServicer
// This service should implement the business logic for every endpoint for the GameAPI API.
// Include any external packages or services that will be required by this service.
type GameAPIService struct {
	db IDB
}

// NewGameAPIService creates a default api service
func NewGameAPIService(db IDB) GameAPIServicer {
	return &GameAPIService{db}
}

// GamesGameIdDelete -
func (s *GameAPIService) GamesGameIdDelete(ctx context.Context, gameId string) (ImplResponse, error) {
	_, err := s.db.DeleteGame(&Game{Id: gameId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// GamesGameIdGet -
func (s *GameAPIService) GamesGameIdGet(ctx context.Context, gameId string) (ImplResponse, error) {
	g, err := s.db.SelectGame(&Game{Id: gameId})
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, g), nil
}

// GamesGameIdPut -
func (s *GameAPIService) GamesGameIdPut(ctx context.Context, gameId string, game Game) (ImplResponse, error) {
	game.Id = gameId
	g, err := s.db.UpdateGame(&game)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, g), nil
}

// GamesPost -
func (s *GameAPIService) GamesPost(ctx context.Context, game Game) (ImplResponse, error) {
	_, err := s.db.InsertGame(&game)
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}
