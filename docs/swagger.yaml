openapi: 3.0.3
info:
  title: WaxFlower
  contact:
    email: keijun091221@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
tags:
  - name: main
    description: What is essential is usually invisible to the eye
  - name: ticket
    description: Everything about ticket
  - name: user
    description: Everything about user
  - name: game
    description: Everything about game
  - name: seat
    description: Everything about seat
paths:
  /users:
    post:
      tags:
        - user
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /users/{userId}:
    get:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: 17737082-837e-49f4-a627-87d7a1594b60
          required: true
      responses:
        200:
          $ref: "#/components/responses/200User"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: c9dfaa6d-c7b9-4ec6-88e4-307222c4d29e
          required: true
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: 77ec276c-7301-46c1-bcbe-e6d31ef5acc6
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /games:
    post:
      tags:
        - game
      requestBody:
        $ref: "#/components/requestBodies/Game"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /games/{gameId}:
    get:
      tags:
        - game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
            example: 08384d72-bf72-446e-b74e-1449f707639b
          required: true
      responses:
        200:
          $ref: "#/components/responses/200Game"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
            example: 08384d72-bf72-446e-b74e-1449f707639b
          required: true
      requestBody:
        $ref: "#/components/requestBodies/Game"
      responses:
        200:
          $ref: "#/components/responses/200Game"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
            example: 9e3b2af4-2564-48e9-913c-48e2326e81fa
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /seats:
    post:
      tags:
        - seat
      requestBody:
        $ref: "#/components/requestBodies/Seat"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /seats/{seatId}:
    get:
      tags:
        - seat
      parameters:
        - in: path
          name: seatId
          schema:
            type: string
            format: uuid
            example: 2583c890-a814-4ec1-a1f1-1818c530679a
          required: true
      responses:
        200:
          $ref: "#/components/responses/200Seat"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - seat
      parameters:
        - in: path
          name: seatId
          schema:
            type: string
            format: uuid
            example: e15805d1-b82d-4942-9046-84a73319d060
          required: true
      requestBody:
        $ref: "#/components/requestBodies/Seat"
      responses:
        200:
          $ref: "#/components/responses/200Seat"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - seat
      parameters:
        - in: path
          name: seatId
          schema:
            type: string
            format: uuid
            example: 741bae28-7f4a-4b0b-aad7-2323fb61dc58
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: e241f57c-0521-3caf-82ac-c1295eb32ac8
        name:
          type: string
          format: email
          example: brandonnichols@example.net
    Game:
      type: object
      required:
        - id
        - date
        - time
      properties:
        id:
          type: string
          format: uuid
          example: 94518720-e444-4b18-b6f7-34d8af654a5
        date:
          type: string
          format: date
          example: 1999-07-10
        time:
          type: string
          format: time
          example: 13:45:00
    Seat:
      type: object
      required:
        - id
        - gate
        - col
        - row
      properties:
        id:
          type: string
          format: uuid
          example: db10fba1-c46e-4712-a8c7-cc0991df54f4
        gate:
          type: integer
          minimum: 1
          maximum: 9
          example: 7
        col:
          type: integer
          minimum: 1
          maximum: 99
          example: 57
        row:
          type: string
          pattern: '^[A-Z][A-Z]$'
          example: AZ
    # Ticket:
    #   type: object
    #   properties:
    #     id:
    #       type: string
    #       format: uuid
    #       example: a79b47aa-301b-3221-a323-5e63601b9615
    #     place:
    #       type: integer
    #       format: int64
    #       example: 5000
    #     user:
    #       $ref: '#/components/schemas/User'
    #     game:
    #       $ref: '#/components/schemas/Game'
    #     seat:
    #       $ref: '#/components/schemas/Seat'
  requestBodies:
    User:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Game:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Game'
    Seat:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Seat'
    # Ticket:
    #   required: true
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/Ticket'
  responses:
    200User:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/User'
    200Game:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Game'
    200Seat:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Seat'
    # 200Ticket:
    #   description: OK
    #   content:
    #     text/plain:
    #       schema:
    #         $ref: '#/components/schemas/Ticket'
    # 200Tickets:
    #   description: OK
    #   content:
    #     text/plain:
    #       schema:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/Ticket'
    200:
      description: OK
    400:
      description: Bad request
    404:
      description: Not Found
    500:
      description: Internal Server Error
