openapi: 3.0.3
info:
  title: WaxFlower
  contact:
    email: keijun091221@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
servers:
  - url: http://localhost:8080
tags:
  - name: main
    description: What is essential is usually invisible to the eye
  - name: ticket
    description: Everything about ticket
  - name: user
    description: Everything about user
  - name: game
    description: Everything about game
  - name: seat
    description: Everything about seat
paths:
  /tickets/search:
    get:
      tags:
        - main
      parameters:
        - in: query
          name: dateBefore
          schema:
            type: string
            format: date
            example: 2012-04-01
          required: true
        - in: query
          name: dateAfter
          schema:
            type: string
            format: date
            example: 2020-07-28
          required: true
        - in: query
          name: secFrom
          schema:
            type: integer
            example: 5
        - in: query
          name: secTo
          schema:
            type: integer
            example: 9
        - in: query
          name: priceMin
          schema:
            type: integer
            example: 3000
        - in: query
          name: priceMax
          schema:
            type: integer
            example: 6000
      responses:
        200:
          $ref: "#/components/responses/200Tickets"
        400:
          $ref: "#/components/responses/400"
  /tickets/buy:
    put:
      tags:
        - main
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  example: 9d7efaa0-9ae4-41c2-9d13-d8f3d009e44f
                userId:
                  type: string
                  format: uuid
                  example: ffec5bda-dee6-4c8c-a8a0-0dd0554261cc
      responses:
        200:
          $ref: "#/components/responses/200Ticket"
        400:
          $ref: "#/components/responses/400"
  /users:
    post:
      tags:
        - user
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /users/{userId}:
    get:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: e241f57c-0521-3caf-82ac-c1295eb32ac8
          required: true
      responses:
        200:
          $ref: "#/components/responses/200User"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: e241f57c-0521-3caf-82ac-c1295eb32ac8
          required: true
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: e241f57c-0521-3caf-82ac-c1295eb32ac8
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /games:
    post:
      tags:
        - game
      requestBody:
        $ref: "#/components/requestBodies/Game"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /games/{gameId}:
    get:
      tags:
        - game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
            example: 94518720-e444-4b18-b6f7-34d8af654a5
          required: true
      responses:
        200:
          $ref: "#/components/responses/200Game"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
            example: 94518720-e444-4b18-b6f7-34d8af654a5
          required: true
      requestBody:
        $ref: "#/components/requestBodies/Game"
      responses:
        200:
          $ref: "#/components/responses/200Game"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
            example: 94518720-e444-4b18-b6f7-34d8af654a5
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /seats:
    post:
      tags:
        - seat
      requestBody:
        $ref: "#/components/requestBodies/Seat"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /seats/{seatId}:
    get:
      tags:
        - seat
      parameters:
        - in: path
          name: seatId
          schema:
            type: string
            format: uuid
            example: db10fba1-c46e-4712-a8c7-cc0991df54f4
          required: true
      responses:
        200:
          $ref: "#/components/responses/200Seat"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - seat
      parameters:
        - in: path
          name: seatId
          schema:
            type: string
            format: uuid
            example: db10fba1-c46e-4712-a8c7-cc0991df54f4
          required: true
      requestBody:
        $ref: "#/components/requestBodies/Seat"
      responses:
        200:
          $ref: "#/components/responses/200Seat"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - seat
      parameters:
        - in: path
          name: seatId
          schema:
            type: string
            format: uuid
            example: db10fba1-c46e-4712-a8c7-cc0991df54f4
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /tickets:
    post:
      tags:
        - ticket
      requestBody:
        $ref: "#/components/requestBodies/Ticket"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
  /tickets/{ticketId}:
    get:
      tags:
        - ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: a79b47aa-301b-3221-a323-5e63601b9615
          required: true
      responses:
        200:
          $ref: "#/components/responses/200Ticket"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: a79b47aa-301b-3221-a323-5e63601b9615
          required: true
      requestBody:
        $ref: "#/components/requestBodies/Ticket"
      responses:
        200:
          $ref: "#/components/responses/200Ticket"
        400:
          $ref: "#/components/responses/400"
    delete:
      tags:
        - ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: a79b47aa-301b-3221-a323-5e63601b9615
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          format: uuid
          example: e241f57c-0521-3caf-82ac-c1295eb32ac8
        email:
          type: string
          format: email
          example: brandonnichols@example.net
    Game:
      type: object
      required:
        - id
        - date
        - time
      properties:
        id:
          type: string
          format: uuid
          example: 94518720-e444-4b18-b6f7-34d8af654a5
        date:
          type: string
          format: date
          example: 1999-07-10
        time:
          type: string
          format: time
          example: 13:45:00
    Seat:
      type: object
      required:
        - id
        - sec
        - col
        - row
      properties:
        id:
          type: string
          format: uuid
          example: db10fba1-c46e-4712-a8c7-cc0991df54f4
        sec:
          type: integer
          minimum: 1
          maximum: 9
          example: 7
        col:
          type: integer
          minimum: 1
          maximum: 99
          example: 57
        row:
          type: string
          pattern: '^[A-Z][A-Z]$'
          example: AZ
    Ticket:
      type: object
      required:
        - id
        - price
        - gameId
        - seatId
      properties:
        id:
          type: string
          format: uuid
          example: a79b47aa-301b-3221-a323-5e63601b9615
        price:
          type: integer
          format: int64
          example: 5000
        userId:
          type: string
          format: uuid
          example:
            $ref: '#/components/schemas/User/properties/id/example'
        gameId:
          type: string
          format: uuid
          example:
            $ref: '#/components/schemas/Game/properties/id/example'
        seatId:
          type: string
          format: uuid
          example:
            $ref: '#/components/schemas/Seat/properties/id/example'
  requestBodies:
    User:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Game:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Game'
    Seat:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Seat'
    Ticket:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ticket'
  responses:
    200User:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/User'
    200Game:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Game'
    200Seat:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Seat'
    200Ticket:
      description: OK
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Ticket'
    200Tickets:
      description: OK
      content:
        text/plain:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Ticket'
    200:
      description: OK
    400:
      description: Bad request
    404:
      description: Not Found
    500:
      description: Internal Server Error
